package challenge

/*
 * DO NOT EDIT THIS FILE
 *
 */

import (
	"flag"
	"fmt"
	"github.com/garyburd/redigo/redis"
	"time"
)

var (
	pool        *redis.Pool
	redisServer = flag.String("redisServer", ":6379", "")
	keyPrefix   = "sbchallenge"
)

func NewRedisDB(addr string) DB {
	// clear all keys before starting
	conn, err := redis.Dial("tcp", addr)
	if err != nil {
		panic(err)
	}

	keys, err := redis.Strings(conn.Do("KEYS", keyPrefix+"*"))
	if err != nil {
		panic(err)
	}

	for _, k := range keys {
		conn.Do("DEL", k)
	}
	return &delayedRedisDB{newDelayedPool(addr)}
}

type delayedConn struct {
	redis.Conn
}

func (c *delayedConn) Do(commandName string, args ...interface{}) (reply interface{}, err error) {
	// slow down redis communication
	if commandName == "EXEC" {
		time.Sleep(time.Millisecond * 20)
	}
	return c.Conn.Do(commandName, args...)
}

func newDelayedPool(addr string) *redis.Pool {

	return &redis.Pool{
		MaxIdle:     3,
		IdleTimeout: 240 * time.Second,
		Dial: func() (redis.Conn, error) {
			conn, err := redis.Dial("tcp", addr)
			return &delayedConn{conn}, err
		},
	}
}

type delayedRedisDB struct {
	pool *redis.Pool
}

func (db *delayedRedisDB) Get(ids []string) ([]int, error) {
	conn := db.pool.Get()
	defer conn.Close()

	conn.Send("MULTI")

	for _, id := range ids {
		conn.Send("GET", fmt.Sprintf("%s:%s", keyPrefix, id))
	}

	// use helper to parse results into []int
	return redis.Ints(conn.Do("EXEC"))
}

func (db *delayedRedisDB) Set(ids []string, vals []int) error {
	if len(ids) != len(vals) {
		panic("number of ids should match the number of values")
	}

	conn := db.pool.Get()
	defer conn.Close()

	conn.Do("MULTI")
	for i, id := range ids {
		conn.Send("SET", fmt.Sprintf("%s:%s", keyPrefix, id), vals[i])
	}

	_, err := conn.Do("EXEC")
	return err
}
